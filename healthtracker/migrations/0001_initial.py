# Generated by Django 4.1.2 on 2022-11-29 17:42

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Allergies',
            fields=[
                ('allergies_id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='Allergy ID')),
                ('severity', models.CharField(max_length=15)),
                ('allergy_name', models.CharField(max_length=30)),
            ],
            options={
                'db_table': 'allergies',
            },
        ),
        migrations.CreateModel(
            name='Allergies_User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'allergies_user',
            },
        ),
        migrations.CreateModel(
            name='Comorbidities',
            fields=[
                ('comorbidities_id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='Comorbidities ID')),
                ('risk_name', models.CharField(max_length=30)),
                ('description', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'comorbidities',
            },
        ),
        migrations.CreateModel(
            name='Comorbidities_User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'comorbidities_user',
            },
        ),
        migrations.CreateModel(
            name='Food',
            fields=[
                ('food_id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='Food ID')),
                ('food_name', models.CharField(max_length=100)),
                ('sodium', models.DecimalField(decimal_places=2, max_digits=6)),
                ('protein', models.DecimalField(decimal_places=2, max_digits=6)),
                ('water', models.DecimalField(decimal_places=2, max_digits=6)),
                ('k', models.DecimalField(decimal_places=2, max_digits=6)),
                ('phos', models.DecimalField(decimal_places=2, max_digits=6)),
            ],
            options={
                'db_table': 'food',
            },
        ),
        migrations.CreateModel(
            name='Has',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(decimal_places=2, max_digits=5)),
            ],
            options={
                'db_table': 'has',
            },
        ),
        migrations.CreateModel(
            name='Journal_Entries',
            fields=[
                ('journal_entries_id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='Journal Entry ID')),
                ('datetime', models.DateTimeField(auto_now_add=True)),
                ('meal_name', models.CharField(max_length=25)),
                ('note', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'journal_entries',
            },
        ),
        migrations.CreateModel(
            name='Lab_Results',
            fields=[
                ('test_id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='Lab Results ID')),
                ('date_time', models.DateTimeField()),
                ('test_type', models.CharField(max_length=30)),
                ('company', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'lab_results',
            },
        ),
        migrations.CreateModel(
            name='Level_Conversion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nutrient', models.CharField(max_length=30)),
                ('isIntake', models.BooleanField()),
                ('measurement_unit', models.CharField(max_length=10)),
            ],
            options={
                'db_table': 'level_conversion',
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('f_name', models.CharField(max_length=30)),
                ('m_name', models.CharField(max_length=30)),
                ('l_name', models.CharField(max_length=30)),
                ('date_of_birth', models.DateField()),
                ('street_address', models.CharField(max_length=50)),
                ('city', models.CharField(max_length=20)),
                ('state', models.CharField(max_length=2)),
                ('zip', models.CharField(max_length=10)),
                ('county', models.CharField(max_length=20)),
                ('username', models.CharField(max_length=15)),
                ('password', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'person',
            },
        ),
        migrations.CreateModel(
            name='Suggested_Levels',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_stage', models.IntegerField()),
                ('gender', models.CharField(max_length=1)),
                ('min_sodium_intake', models.IntegerField()),
                ('max_sodium_intake', models.IntegerField()),
                ('min_protein_intake', models.IntegerField()),
                ('max_protein_intake', models.IntegerField()),
                ('water_intake', models.DecimalField(decimal_places=2, max_digits=5)),
                ('min_k_intake', models.IntegerField()),
                ('max_k_intake', models.IntegerField()),
                ('min_phos_intake', models.IntegerField()),
                ('max_phos_intake', models.IntegerField()),
                ('min_internal_k', models.DecimalField(decimal_places=2, max_digits=5)),
                ('max_internal_k', models.DecimalField(decimal_places=2, max_digits=5)),
                ('min_internal_phos', models.DecimalField(decimal_places=2, max_digits=5)),
                ('max_internal_phos', models.DecimalField(decimal_places=2, max_digits=5)),
                ('min_internal_na', models.IntegerField()),
                ('max_internal_na', models.IntegerField()),
                ('min_internal_creatinine', models.DecimalField(decimal_places=2, max_digits=4)),
                ('internal_albumin', models.IntegerField()),
                ('min_internal_sugar', models.IntegerField()),
                ('max_internal_sugar', models.IntegerField()),
            ],
            options={
                'db_table': 'suggested_levels',
            },
        ),
        migrations.CreateModel(
            name='Units',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attribute', models.CharField(max_length=30)),
                ('measurement_unit', models.CharField(max_length=3)),
            ],
            options={
                'db_table': 'units',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('person_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, to='healthtracker.person')),
                ('user_id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='User ID')),
                ('current_height', models.IntegerField()),
                ('current_weight', models.DecimalField(decimal_places=2, max_digits=5)),
                ('race', models.CharField(max_length=10)),
            ],
            options={
                'db_table': 'user',
            },
            bases=('healthtracker.person',),
        ),
        migrations.CreateModel(
            name='Test_Results',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('substance', models.CharField(max_length=30)),
                ('level', models.DecimalField(decimal_places=2, max_digits=6)),
                ('test_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='healthtracker.lab_results')),
            ],
            options={
                'db_table': 'test_results',
            },
        ),
        migrations.AddConstraint(
            model_name='suggested_levels',
            constraint=models.UniqueConstraint(fields=('gender', 'current_stage'), name='suggested_levels_CPK'),
        ),
        migrations.AddField(
            model_name='person',
            name='gender',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='healthtracker.suggested_levels'),
        ),
        migrations.AddField(
            model_name='has',
            name='food_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='healthtracker.food'),
        ),
        migrations.AddField(
            model_name='has',
            name='journal_entries_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='healthtracker.journal_entries'),
        ),
        migrations.AddField(
            model_name='comorbidities_user',
            name='comorbidities_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='healthtracker.comorbidities'),
        ),
        migrations.AddField(
            model_name='allergies_user',
            name='allergies_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='healthtracker.allergies'),
        ),
        migrations.AddField(
            model_name='user',
            name='current_stage',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='healthtracker.suggested_levels'),
        ),
        migrations.AddField(
            model_name='comorbidities_user',
            name='user_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='healthtracker.user'),
        ),
        migrations.AddField(
            model_name='allergies_user',
            name='user_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='healthtracker.user'),
        ),
    ]
